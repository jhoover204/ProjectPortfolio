female = rep(rep(female, 3), length(dagfit.list)),
cogscore = factor(rep(rep(cogscore.levels, each = length(female)),
length(dagfit.list)),
levels = cogscore.levels),
dag = rep(c("dag_39", "dag_32", "dag_31"), each = length(female)*n.cog))
##change factor to be "longer" so it matches the size of the other plots for formatting
fem.df$female <- factor(fem.df$female,
labels = c("                                    Female",
"                                      Male"))
#Plot conditional probabilities by age BASE DAG
##Only plotting DAG39 because found relatively equivalent to DAG32
ggplot(fem.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = female, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Sex", y = "P(Impairment Status|Sex)")+
theme_bw()+
facet_wrap(~cogscore, nrow = 3)+
ggtitle("DAG 39: Probability of Impairment Status Given Sex")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title= element_text(hjust = 0.5))
ggsave("dag_39_sex_query.png", width = 7,height= 7)
##Check prob of each cogscore given education from each DAG
education.levels <- c("In School/Other",
"No Education",
"Primary", "Lower Secondary",
"Upper Secondary ", "Post-secondary Non-tertiary",
"First State Tertiary", "Second State Tertiary",
"No Info/Don't Know/Refused")
##To query the graph we use a for loop so that we can
##Check the probability of each cognitive score given each level of the data
##Loop follows the same structure as the first with age so it is not commented
edu.res <- c()
for(dag in dagfit.list) {
for (cog in cogscore.levels) {
temp.res <- c()
for (j in education.levels) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (education == j),
event = (cogscore %in% cog)
))
}
edu.res <- c(edu.res, temp.res)
}
}
##create results dataframe for plotting
##follows structure of loop
edu.df <- data.frame(cond.probs = edu.res,
education = rep(rep(education.levels, 3),
length(dagfit.list)),
cogscore = factor(rep(rep(cogscore.levels,
each = length(education.levels)),
length(dagfit.list)),
levels = cogscore.levels),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(education.levels)*n.cog))
edu.df$education <- factor(edu.df$education, levels = education.levels)
##Probability impairment given education
##Only plotting DAG 39 because found relatively equivalent to DAG32
ggplot(edu.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = education, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Education (ISCED)", y = "P(Impairment Status|Education)")+
facet_wrap(~cogscore, nrow = 3)+
theme_bw()+
ggtitle("DAG 39: Probability of Impairment Status Given Education")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("dag39_education_query.png", width = 7, height = 7)
##Query graphs to find the conditional probability of cognitive impairment given depression
depr <- levels(train_6$depression)
##To query the graph we use a for loop so that we can
##Check the probability of each cognitive score given each level of the data
##Loop follows the same structure as the first with age so it is not commented
depr.res <- c()
for(dag in dagfit.list) {
for (cog in cogscore.levels) {
temp.res <- c()
for (j in depr) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (depression == j),
event = (cogscore %in% cog)
))
}
depr.res <- c(depr.res, temp.res)
}
}
##create dataframe for depression results
depr.df <- data.frame(cond.probs = depr.res,
depression = rep(rep(depr, 3),
length(dagfit.list)),
cogscore = factor(rep(rep(cogscore.levels,
each = length(depr)),
length(dagfit.list)),
levels = cogscore.levels),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(depr)*n.cog))
##order depression levels
depr.levels <- c(as.character(seq(0,12)), "No Info/Don't Know/Refused")
depr.df$depression <- factor(depr.df$depression,
levels = depr.levels)
##Probability of Impairment Status given Depression
##Only plotting DAG39 because found relatively equivalent to DAG32
ggplot(depr.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = depression, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Depression", y = "P(Impairment Status|Depression)")+
facet_wrap(~cogscore, nrow = 3)+
theme_bw()+
ggtitle("DAG 39: Probability of Impairment Status Given Depression")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("dag39_depression_query.png", width = 7, height = 7)
##Quality of life
life_qual <- levels(train$casp)
##To query the graph we use a for loop so that we can
##Check the probability of each cognitive score given each level of the data
casp.res <- c()
for(dag in dagfit.list) {
for (cog in cogscore.levels) {
temp.res <- c()
for (j in life_qual) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (casp == j),
event = (cogscore %in% cog)
))
}
casp.res <- c(casp.res, temp.res)
}
}
casp.df <- data.frame(cond.probs = casp.res,
life_qual = rep(rep(life_qual, 3),
length(dagfit.list)),
cogscore = factor(rep(rep(cogscore.levels,
each = length(life_qual)),
length(dagfit.list)),
levels = cogscore.levels),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(life_qual)*n.cog))
##Probability of impairment status given quality of life
##Only plotting DAG39 because found relatively equialent to DAG 32
ggplot(casp.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = life_qual, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Quality of Life (CASP)", y = "P(Impairment Status|CASP)")+
facet_wrap(~cogscore, nrow = 3)+
theme_bw()+
ggtitle("DAG 39: Probability of Impairment Status given Quality of Life (CASP)")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("dag39_quality_of_life_query.png", width = 7, height = 7)
##Query DAGs for conditional probability of cognitive impairment given drinking
drink.levels <- c("Not at all",
"<1 times\nper month", "1-2 days\nper week",
"1-2 times\nper month","3-4 days\nper week",
"5-6 days\nper week", "Almost daily","No Info/Don't Know/\nRefused")
##To query the graph we use a for loop so that we can
##Check the probability of each cognitive score given each level of the data
##Loop follows the same structure as the first with age so it is not commented
drink.res <- c()
for(dag in dagfit.list) {
for (cog in cogscore.levels) {
temp.res <- c()
for (j in drink.levels) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (drinking == j),
event = (cogscore %in% cog)
))
}
drink.res <- c(drink.res, temp.res)
}
}
##create drinking conditional probability dataframe
drink.df <- data.frame(cond.probs = drink.res,
drinking = rep(rep(drink.levels, 3),
length(dagfit.list)),
cogscore = factor(rep(rep(cogscore.levels,
each = length(drink.levels)),
length(dagfit.list)),
levels = cogscore.levels),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(drink.levels)*n.cog))
drink.df$drinking <- factor(drink.df$drinking,
levels = drink.levels)
##rename the missing data so that it is the same format as the rest
levels(drink.df$drinking)[8]<- "No Info/Don't Know/Refused"
##Only plotting DAG_32 because drinking was only found significant in DAG_32
ggplot(drink.df %>% dplyr::filter(dag == "dag_32"))+
geom_bar(aes(x = drinking, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Drinking Level", y = "P(Impairment Status|Drinking)")+
facet_wrap(~cogscore, nrow = 3)+
theme_bw()+
ggtitle("DAG 32: Probability of Impairment Status Given Drinking Level")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, size = 8, hjust = 1))
ggsave("dag32_drinking_query.png", width = 7, height = 7)
##Query the graph to find the probability of low quality of life given educaiton
education.levels <- education.levels
casp.fixed <- c("[12,16)","[16,20)", "[20,24)", ##Low
"[24,28)","[28,32)",  "[32,36)", "[36,40)", ##Mid
"[40,44)", "[44,48)", "[48,52)") ##High
##To query the graph we use a for loop so that we can
##Check the probability of quality of life given each level of the data
##Loop follows the same structure as the first with age so it is not commented
casp.ed.res <- c()
for(dag in dagfit.list) {
for (casp.i in casp.fixed) {
temp.res <- c()
for (j in education.levels) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (education == j),
event = (casp %in% casp.i)
))
}
casp.ed.res <- c(casp.ed.res, temp.res)
}
}
##conditional probability dataframe for casp through education
casp.ed.df <- data.frame(cond.probs = casp.ed.res,
education = rep(rep(education.levels, length(casp.fixed)),
length(dagfit.list)),
casp = factor(rep(rep(casp.fixed,
each = length(education.levels)),
length(dagfit.list)),
levels = casp.fixed),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(education.levels)*length(casp.fixed)))
casp.ed.df$education <- factor(casp.ed.df$education, levels = education.levels)
##Group casp results by Low/Mid/High life Quality
casp.ed.df <- casp.ed.df %>%
mutate(class = case_when(casp %in% c("[12,16)","[16,20)","[20,24)") ~ "Low Life Quality [16,24)",
casp %in% c("[24,28)","[28,32)",
"[32,36)","[36,40)") ~ "Medium Life Quality [24,40)",
TRUE ~ "High Life Quality [40,52)"))
##calc cond prob in groups by marginalizing over the groups here
casp.ed.df <- casp.ed.df %>% group_by(education, class, dag) %>%
summarise(cond.probs = sum(cond.probs)) %>% ungroup()
casp.ed.df$casp = casp.ed.df$class
casp.ed.df$casp = factor(casp.ed.df$casp,
levels = c("Low Life Quality [16,24)",
"Medium Life Quality [24,40)",
"High Life Quality [40,52)"))
##Plot conditional probabilities for low/high casp given education levels
##Only plotting DAG39 because relatively equivalent to DAG32
ggplot(casp.ed.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = education, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x="Education (ISCED)", y = "P(CASP|Education)")+
facet_wrap(~casp, nrow = 4)+
theme_bw()+
ggtitle("DAG 39: Probability of Quality of Life (CASP) Given Education")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, size = 8, hjust = 1))
ggsave("dag39_casp_through_education_query.png", width = 7, height = 7)
##We query the graph to find the conditional probability of depression
##given quality of life
casp.levels <- levels(train_6$casp) ##levels defined before
depr.fixed <- as.character(seq(0,12)) ##least depressed to most depression
##To query the graph we use a for loop so that we can
##Check the probability of quality of life given each level of the data
##Loop follows the same structure as the first with age so it is not commented
depr.casp.res <- c()
for(dag in dagfit.list) {
for (depr.i in depr.fixed) {
temp.res <- c()
for (j in casp.levels) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (casp == j),
event = (depression %in% depr.i)
))
}
depr.casp.res <- c(depr.casp.res, temp.res)
}
}
##create conditional probability data frame
depr.casp.df <- data.frame(cond.probs = depr.casp.res,
casp = rep(rep(casp.levels, length(depr.fixed)),
length(dagfit.list)),
depression = factor(rep(rep(depr.fixed,
each = length(casp.levels)),
length(dagfit.list)),
levels = depr.fixed),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(casp.levels)*length(depr.fixed)))
depr.casp.df$casp <- factor(depr.casp.df$casp, levels = casp.levels)
##Create depression groups
depr.casp.df <- depr.casp.df %>%
mutate(class = case_when(depression %in% c("0", "1", "2", "3") ~ "Low Depression (0-3)",
depression %in% c("4", "5", "6", "7", "8") ~ "Mild Depression (4-8)",
TRUE ~ "High Depression (9-12)"))
##calc cond prob in depression groups by marginalizing over the groups
depr.casp.df <- depr.casp.df %>% group_by(casp, class, dag) %>%
summarise(cond.probs = sum(cond.probs)) %>% ungroup()
depr.casp.df$depression = depr.casp.df$class
depr.casp.df$depression = factor(depr.casp.df$depression,
levels = c("Low Depression (0-3)",
"Mild Depression (4-8)",
"High Depression (9-12)"))
#Plot conditional probabilities for low/Mid/high Depr given sphus levels
##Only plotting dag39 because relatively equivalent to dag32
ggplot(depr.casp.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = casp, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Quality of life (CASP)", y = "P(Depression|CASP)")+
facet_wrap(~depression, nrow = 4)+
theme_bw()+
ggtitle("DAG 39: Probability of Depression Given Quality of Life (CASP)")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, size = 8, hjust = 1))
ggsave("dag39_depression_through_casp_query.png", width = 7, height = 7)
##We query the graph to plot the conditional probability of depression give
##perceived health
sphus.levels <- c("poor","fair","good",
"very good","excellent","No Info/Don't Know/\nRefused")
depr.fixed <- as.character(seq(0,12)) ##least depressed to most depression
##Loop follows the same structure as the first with age so it is not commented
depr.sphus.res <- c()
for(dag in dagfit.list) {
for (depr.i in depr.fixed) {
temp.res <- c()
for (j in sphus.levels) {
temp.res <- c(temp.res,
cpquery(
dag,
n = 10 ^ 6,
evidence = (sphus == j),
event = (depression %in% depr.i)
))
}
depr.sphus.res <- c(depr.sphus.res, temp.res)
}
}
##create conditional probability data frame
depr.sphus.df <- data.frame(cond.probs = depr.sphus.res,
sphus = rep(rep(sphus.levels, length(depr.fixed)),
length(dagfit.list)),
depression = factor(rep(rep(depr.fixed,
each = length(sphus.levels)),
length(dagfit.list)),
levels = depr.fixed),
dag = rep(c("dag_39", "dag_32", "dag_31"),
each = length(sphus.levels)*length(depr.fixed)))
depr.sphus.df$sphus <- factor(depr.sphus.df$sphus, levels = sphus.levels)
##rename sphus levels to match other plots
levels(depr.sphus.df$sphus)[6] <- "No Info/Don't Know/Refused"
##create depression groups
depr.sphus.df <- depr.sphus.df %>%
mutate(class = case_when(depression %in% c("0", "1", "2", "3") ~ "Low Depression (0-3)",
depression %in% c("4", "5", "6", "7", "8") ~ "Mild Depression (4-8)",
TRUE ~ "High Depression (9-12)"))
##calc cond prob in lowest or highest by marginalizing over the levels in the groups
depr.sphus.df <- depr.sphus.df %>% group_by(sphus, class, dag) %>%
summarise(cond.probs = sum(cond.probs)) %>% ungroup()
depr.sphus.df$depression = depr.sphus.df$class
depr.sphus.df$depression = factor(depr.sphus.df$depression,
levels = c("Low Depression (0-3)",
"Mild Depression (4-8)",
"High Depression (9-12)"))
##Plot conditional probabilities for low/Mid/high Depr given sphus levels
##Only plotting DAG39 because found relatively equivalent to DAG32
ggplot(depr.sphus.df %>% dplyr::filter(dag == "dag_39"))+
geom_bar(aes(x = sphus, y = cond.probs),
fill = "lightblue", color = "darkblue",
stat = "identity")+
labs(x = "Self-Perceived Health (SPHUS)", y = "P(Depression|SPHUS)")+
facet_wrap(~depression, nrow = 4)+
theme_bw()+
ggtitle("DAG 39: Probability of Depression Given Self-Perceived Health (SPHUS)")+
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, size = 8, hjust = 1))
ggsave("dag39_depression_through_sphus_query.png", width = 7, height = 7)
##Examples of cyclic and acyclic graphs
cyclic.graph <- empty.graph(LETTERS[1:5])
arcs(cyclic.graph, check.cycles = F) <- matrix(c("A", "B",
"B", "C",
"C", "A",
"B", "D",
"D", "E"),
ncol = 2, byrow = T,
dimnames = list(NULL, c("from", "to")))
dag.example <- empty.graph(LETTERS[1:5])
arcs(dag.example) <- matrix(c("A", "B",
"B", "C",
"B", "D",
"D", "E"),
ncol = 2, byrow = T,
dimnames = list(NULL, c("from", "to")))
##Save graphs
png("cyclic_graph_example.png")
graphviz.plot(cyclic.graph, layout = "dot")
dev.off()
png("DAG_example.png")
graphviz.plot(dag.example, layout = "dot")
dev.off()
##select graphs
base_dag <- oversampled_models[["base_dag"]] ##base dag
dag_39 <- oversampled_models[["dag_39"]] ##best dag with casp and depr added
dag_32 <- oversampled_models[["dag_32"]] ##second best with depr and drinking
dag_31 <- oversampled_models[["dag_31"]] ##most generalizable with phys_activity and drinking
##rename nodes
new_nodes <- c("cognitive\nimpairment", "sex","age","education","perceived\nhealth","bmi",
"physical\nactivity", "smoking","daily\nsmoking","drinking",
"quality\nof life","depression", "hhsize", "marital\nstatus","income")
base_dag <- rename.nodes(base_dag, new_nodes)
dag_39 <- rename.nodes(dag_39, new_nodes)
dag_32 <- rename.nodes(dag_32, new_nodes)
dag_31 <- rename.nodes(dag_31, new_nodes)
##visualizing dags and chaning font
##We needed a screen capture to get these plots into the report
pdf("select_DAGS-%03d.pdf", onefile = FALSE)
graphviz.compare.font(base_dag,
dag_39,
dag_32,
dag_31, font = 18)
dev.off()
##Here we make a table with each of the variables,
##Their levels, and a brief description for those that are not obvious
##definiing each variable
definitions <- c("Defined using cognitive scores made from recall and orientation. Severe is 1.5 sd below the mean. Mild is between 1.5 and 1 sd below the mean. Unimpaired is the rest.",
"--", "--", "--", "Self-perceived health from a US survey",
"Body Mass Index",
"Measure sports, heavy housework, or physical labor",
"Currently smoking", "Every smoked daily for at least 1 year",
"Drinking levels for the past 3 months (wave 1: 6 months",
"CASP score. Measures feelings of control, autonomy, pleasure, and self-realization",
"EURO-D score. Measures depressed mood, pessimism, suicidality, guilt, sleep, interest, irritability, appetite, fatigue, concentration, enjoyment and teaffulness",
"Household size", "--", "Net income divided by household size")
##manually specify some levels to make more interpretable
cogscore.levels <- cogscore.levels ##defined earlier
sex.levels <- female ##defined earlier
age.levels <- age.levels ##defined earlier
education.levels <- education.levels ##defined earlier
health.levels <- sphus.levels ##defined earlier
bmi.levels <- c("Underweight", "Overweight", "Healthy", "No Info/Don't Know/Refused")
phys.levels <- c("Rare/Never", "1-3 per month","1 per week",
">1 per Week", "No Info/Don't Know/Refused")
smoking.levels <- daily.smoke.lev <- c("No", "Yes", "No Info/Don't Know/Refused")
drink.levels.new <- c("Not at all","<1 times\nper month",
"1-2 days\nper week","1-2 times\nper month",
"3-4 days\nper week", "5-6 days\nper week",
"Almost daily","No Info/Don't Know/\nRefused")
quality.life.levels <- casp.levels ##defined earlier
depression.levels.new <- c("0-12 (each its own level), No Info/Don't Know/Refused")
hhsize.levels <- c("0-12, 14 (each its own level)") ##each their own level, but 13 is missing
marital.levels <- c("Divorced","Married w/o Spouse",
"Married w/ Spouse","Never Married",
"Partnership","Widowed","No Info/Don't Know/Refused")
income_levels <- c("[-10000,0), [0,10000), ..., [140000,150000), [150000,Max)")
##combine into single characters for table
levels.list <- list(cogscore.levels, sex.levels, age.levels, education.levels,
health.levels, bmi.levels, phys.levels, smoking.levels,
daily.smoke.lev, drink.levels.new, quality.life.levels,
depression.levels.new, hhsize.levels, marital.levels, income_levels)
var_levels <- sapply(levels.list, paste, collapse = ", ")
variable_table <- data.frame(Variable = new_nodes, Levels = var_levels,
Definitions = definitions)
##build table
kbl((variable_table),  table.attr = "style='width:80%;'", booktabs = T) %>%
kable_classic()%>%
column_spec(column = c(1), width = "1em")%>%
column_spec(column = c(2,3), width = "8em") %>%
kable_styling(font = 12)
##first select the countries used internally
country_intern <- country_intern ##internally countries; created before
country_extern <- countries[!(countries %in% country_intern)]
country_vector <- sapply(list(country_intern, "--", ##once for train/test each
country_extern), paste, collapse = ", ")
##create table data
country_table <- data.frame(dataset = c("Internal Training",
"Internal Validation",
"External Validation"),
countries = country_vector, ##vector w/ countries in eahc
percentage = c(length(country_intern)/length(countries),
"--",
length(country_extern)/length(countries)),
N = c(nrow(train_6), ##internal training
nrow(validation_6),##internal validation
nrow(external_df6))) ##external n
colnames(country_table) <- c("Dataset", "Countries",
"Proportion of Countries", "N")
##create table
kbl((country_table),  table.attr = "style='width:80%;'", booktabs = T) %>%
kable_classic()%>%
column_spec(column = c(2), width = "15em")%>%
# column_spec(column = c(2,3), width = "8em") %>%
kable_styling(font = 12)
rm(list = ls())
